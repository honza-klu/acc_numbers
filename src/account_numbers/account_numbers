import random
import json
import os

bank_codes = {}
bank_codes["Fio"] = 2010

def verify_number(acc_number, strict=True):
    num = [int(i) for i in str(acc_number)]
    if(len(num)>10 or len(num)<8):
        return False
        #raise Exception("Account number must be 8-10 digits long")
    if(strict and len(num)==10 and num[0] in {1, 2, 9}):
        return False #Fio restrictions
    S = 1*num[-1] + 2*num[-2] + 4*num[-3] + 8*num[-4] + 5*num[-5] + 10*num[-6] + 9*num[-7] + 7*num[-8]
    if(len(num)>8):
        S += 3*num[-9]
    if (len(num)>9):
        S += 6 * num[-10]
    if(S%11==0):
        return True
    else:
        return False

repeated_bonus = 0.6
same_bonus = 0.6

asc_bonus = 0.7
desc_bonus = 0.8

def number_cost(acc_number, bank_number=""):
    num = [int(i) for i in str(acc_number)]
    cum_cost = 0
    used_digits = set()
    prev_digit = None
    asc_serie = 0
    desc_serie = 0
    for i in range(len(num)):
        digit = num[i]
        cost = 1.0

        if(digit in used_digits):
            cost *= repeated_bonus
        if(prev_digit!=None):
            if(digit==prev_digit):
                cost *= same_bonus
            if(digit==(prev_digit-1)%10):
                desc_serie += 1
            else:
                desc_serie = 0
            if (digit == (prev_digit+1)%10):
                asc_serie += 1
            else:
                asc_serie = 0
            cost = cost * asc_bonus**asc_serie
            cost = cost * desc_bonus ** desc_serie
        used_digits.add(digit)
        prev_digit = digit
        cum_cost += cost

#    if(used_digits == {0, 1}):
#        cum_cost /= 1.1

    return cum_cost

print(verify_number(12345678))
print(verify_number(1481195017))

print(number_cost(13580))
print(number_cost(11111))
print(number_cost(12345))
print(number_cost(1481195017))
print(number_cost(1234567890))

max_accepted_cost = 9999999999
max_candidates = 500000
clean_coef = 1.1
candidates = []
preload = []
considered = 0
valid = 0

tmp_output = "./tmp.json"

if(os.path.exists(tmp_output)):
    with open(tmp_output, 'r') as f:
        preload = json.load(f)
        f.close()

#if(os.path.exists(tmp_output)):
#    with open(tmp_output, 'r') as f:
#        candidates = json.load(f)
#        f.close()

print("Program run")
for acc_n in list(zip(*preload))[1]: #range(10000000, 10000000000):
    considered += 1
    if(not verify_number(acc_n)):
        continue
    valid += 1
    acc_cost = number_cost(acc_n)
    if(acc_cost<max_accepted_cost):
        candidates.append((acc_cost, acc_n,))
    if(len(candidates)>max_candidates*clean_coef):
        candidates = sorted(candidates, key=lambda candidates: candidates[0])
        candidates = candidates[0:max_candidates]
        max_accepted_cost = candidates[-1][0]
        print("Candidates considered:%d" % (considered,))
        print("Valid candidates:%d" % (valid,))
        print("Best cost:%f for candidate:%d" % (candidates[0][0], candidates[0][1]))
        #print(candidates)
        with open(tmp_output, 'w') as f:
            json.dump(candidates, f)
            f.close()
        print("OK")

with open(tmp_output, 'w') as f:
    json.dump(candidates, f)
    f.close()

print("LIST START")
for num in candidates:
    print("%d" % (num[1]))